package se.maha.craft.useful;

import java.io.File;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Deque;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class FindDuplicateFiles {

    private List<File> findFiles(String path) {
        List<File> result = new ArrayList<>();
        Deque<File> stack = new ArrayDeque<>();
        stack.push(new File(path));

        while (!stack.isEmpty()) {
            File current = stack.pop();

            if (current.isFile()) {
                result.add(current);
            } else if (current.isDirectory()) {
                File[] files = current.listFiles();
                if (files != null) {
                    Collections.addAll(stack, files);
                }
            }
        }

        return result;
    }


    private List<File> findAllFiles(String path) {
        var file = new File(path);

        if (!file.exists()) {
            throw new IllegalArgumentException("Path does not exist: " + path);
        }

        if (file.isFile()) {
            return List.of(file); // Process single file directly if needed
        }

        return findFiles(path);
    }


    private Map<String, List<File>> sortFilesByDuplicateCount(List<File> files) {
        return files.stream()
                .collect(Collectors.groupingBy(File::getName))
                .entrySet().stream()
                .sorted((e1, e2) -> Integer.compare(e2.getValue().size(), e1.getValue().size()))
                .collect(Collectors.toMap(
                        Map.Entry::getKey,     // Use the key as is (file name)
                        Map.Entry::getValue,   // Use the value as is (list of files)
                        (v1, v2) -> v1,        // Merge function (not needed, keep the first)
                        LinkedHashMap::new     // Maintain sorted order
                ));
    }

    public static void main(String[] args) {
        var code = new FindDuplicateFiles();
        var files = code.findAllFiles("/Users/khan012/Downloads");
        var sortedMap = code.sortFilesByDuplicateCount(files);

        sortedMap.forEach((name, fileList) ->
                System.out.println(name + " -> " + fileList.size() + " -> " + fileList)
        );
    }

}
